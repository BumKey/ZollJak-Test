//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLights[3];     // Offset:    0, size:  192
    float3  gEyePosW;                   // Offset:  192, size:   12
    float   gFogStart;                  // Offset:  204, size:    4
    float   gFogRange;                  // Offset:  208, size:    4
    float4  gFogColor;                  // Offset:  224, size:   16
    float   gMinDist;                   // Offset:  240, size:    4
    float   gMaxDist;                   // Offset:  244, size:    4
    float   gMinTess;                   // Offset:  248, size:    4
    float   gMaxTess;                   // Offset:  252, size:    4
    float   gTexelCellSpaceU;           // Offset:  256, size:    4
    float   gTexelCellSpaceV;           // Offset:  260, size:    4
    float   gWorldCellSpace;            // Offset:  264, size:    4
    float2  gTexScale = { 50 };         // Offset:  272, size:    8
    float4  gWorldFrustumPlanes[6];     // Offset:  288, size:   96
}

cbuffer cbPerObject
{
    float4x4 gViewProj;                 // Offset:    0, size:   64
    Material gMaterial;                 // Offset:   64, size:   64
}

//
// 5 local object(s)
//
Texture2DArray gLayerMapArray;
Texture2D gBlendMap;
Texture2D gHeightMap;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState samHeightmap
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 6 technique(s)
    //
    technique11 Light1
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input v0.xz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_temps 1
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0, l(0.000000)
                mov o0.y, r0.x
                mov o0.xz, v0.xxzx
                mov o1.xy, v1.xyxx
                mov o1.zw, v2.xxxy
                ret 
                // Approximately 6 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4
                //   float gMaxDist;                    // Offset:  244 Size:     4
                //   float gMinTess;                    // Offset:  248 Size:     4
                //   float gMaxTess;                    // Offset:  252 Size:     4
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float   x   
                // SV_TessFactor            1   x           1 QUADEDGE  float   x   
                // SV_TessFactor            2   x           2 QUADEDGE  float   x   
                // SV_TessFactor            3   x           3 QUADEDGE  float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT  float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[24], dynamicIndexed
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 1
                mov r0.x, vOutputControlPointID
                mov o0.xyz, v[r0.x + 0][0].xyzx
                mov o1.xy, v[r0.x + 0][1].xyxx
                ret 
                hs_fork_phase 
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 5
                mov r0.xz, vicp[2][0].xxzx
                mov r0.y, vicp[0][1].z
                mov r1.xz, vicp[1][0].xxzx
                mov r1.y, vicp[0][1].w
                add r2.xyz, r0.xyzx, r1.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                add r0.xyz, -r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mov r2.w, l(1.000000)
                mov r1.y, l(0)
                mov r1.zw, l(0,0,0,0)
                mov r0.w, l(0)
                loop 
                  ige r3.x, r1.w, l(6)
                  mov r0.w, l(0)
                  breakc_nz r3.x
                  dp3 r3.x, r0.xyzx, |cb0[r1.w + 18].xyzx|
                  dp4 r3.y, r2.xyzw, cb0[r1.w + 18].xyzw
                  add r3.x, r3.x, r3.y
                  lt r3.x, r3.x, l(0.000000)
                  if_nz r3.x
                    mov r1.z, l(-1)
                    mov r0.w, l(-1)
                    break 
                  endif 
                  iadd r1.x, r1.w, l(1)
                  mov r1.zw, r1.yyyx
                  mov r0.w, r3.x
                endloop 
                and r0.x, r1.z, r0.w
                if_nz r0.x
                  mov o0.x, l(0)
                  mov o1.x, l(0)
                  mov o2.x, l(0)
                  mov o3.x, l(0)
                  mov o4.x, l(0)
                  mov o5.x, l(0)
                  ret 
                else 
                  add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                  add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                  add r2.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                  add r3.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                  add r4.xyz, r1.xyzx, vicp[2][0].xyzx
                  add r4.xyz, r4.xyzx, vicp[3][0].xyzx
                  mad r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r0.x, r0.xyzx, r0.xyzx
                  sqrt r0.x, r0.x
                  add r0.x, r0.x, -cb0[15].x
                  add r0.yz, -cb0[15].xxwx, cb0[15].yyzy
                  div_sat r0.x, r0.x, r0.y
                  mad r0.x, r0.x, r0.z, cb0[15].w
                  exp r0.x, r0.x
                  mad r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r0.w, r1.xyzx, r1.xyzx
                  sqrt r0.w, r0.w
                  add r0.w, r0.w, -cb0[15].x
                  div_sat r0.w, r0.w, r0.y
                  mad r0.w, r0.w, r0.z, cb0[15].w
                  exp r0.w, r0.w
                  mad r1.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r1.x, r1.xyzx, r1.xyzx
                  sqrt r1.x, r1.x
                  add r1.x, r1.x, -cb0[15].x
                  div_sat r1.x, r1.x, r0.y
                  mad r1.x, r1.x, r0.z, cb0[15].w
                  exp r1.x, r1.x
                  mad r2.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r1.w, -cb0[15].x
                  div_sat r1.w, r1.w, r0.y
                  mad r1.w, r1.w, r0.z, cb0[15].w
                  exp r1.y, r1.w
                  mad r2.xyz, r4.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), -cb0[12].xyzx
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r1.w, -cb0[15].x
                  div_sat r0.y, r1.w, r0.y
                  mad r0.y, r0.y, r0.z, cb0[15].w
                  exp r1.z, r0.y
                  min o0.x, r0.x, l(64.000000)
                  min o1.x, r0.w, l(64.000000)
                  min r0.xyz, r1.xyzx, l(64.000000, 64.000000, 64.000000, 0.000000)
                  mov o2.x, r0.x
                  mov o3.x, r0.y
                  mov o4.x, r0.z
                  mov o5.x, r0.z
                  ret 
                endif 
                ret 
                // Approximately 95 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float       
                // SV_TessFactor            1   x           1 QUADEDGE  float       
                // SV_TessFactor            2   x           2 QUADEDGE  float       
                // SV_TessFactor            3   x           3 QUADEDGE  float       
                // SV_InsideTessFactor      0   x           4  QUADINT  float       
                // SV_InsideTessFactor      1   x           5  QUADINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_temps 2
                add r0.xy, -vicp[2][0].xzxx, vicp[3][0].xzxx
                mad r0.xy, vDomain.xxxx, r0.xyxx, vicp[2][0].xzxx
                add r0.zw, -vicp[0][0].xxxz, vicp[1][0].xxxz
                mad r0.zw, vDomain.xxxx, r0.zzzw, vicp[0][0].xxxz
                add r0.xy, -r0.zwzz, r0.xyxx
                mad r0.xz, vDomain.yyyy, r0.xxyx, r0.zzwz
                add r1.xy, -vicp[2][1].xyxx, vicp[3][1].xyxx
                mad r1.xy, vDomain.xxxx, r1.xyxx, vicp[2][1].xyxx
                add r1.zw, -vicp[0][1].xxxy, vicp[1][1].xxxy
                mad r1.zw, vDomain.xxxx, r1.zzzw, vicp[0][1].xxxy
                add r1.xy, -r1.zwzz, r1.xyxx
                mad r1.xy, vDomain.yyyy, r1.xyxx, r1.zwzz
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.xyxx, t0.yxzw, s0, l(0.000000)
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb1[0].xyzw
                dp4 o0.y, r0.xyzw, cb1[1].xyzw
                dp4 o0.z, r0.xyzw, cb1[2].xyzw
                dp4 o0.w, r0.xyzw, cb1[3].xyzw
                mov o1.xyz, r0.xyzx
                mul o2.zw, r1.xxxy, cb0[17].xxxy
                mov o2.xy, r1.xyxx
                ret 
                // Approximately 22 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4
                //   float gWorldCellSpace;             // Offset:  264 Size:     4
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samHeightmap                      sampler      NA          NA    1        1
                // gLayerMapArray                    texture  float4     2darray    0        1
                // gBlendMap                         texture  float4          2d    1        1
                // gHeightMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[7], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_output o0.xyzw
                dcl_temps 5
                mov r0.xy, v2.zwzz
                mov r0.z, l(3.000000)
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, r0.xyzx, t0.xyzw, s0
                mov r1.xy, v2.zwzz
                mov r1.z, l(2.000000)
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, r1.xyzx, t0.xyzw, s0
                mov r2.xy, v2.zwzz
                mov r2.z, l(1.000000)
                sample_indexable(texture2darray)(float,float,float,float) r2.xyzw, r2.xyzx, t0.xyzw, s0
                mov r3.xy, v2.zwzz
                mov r3.z, l(0)
                sample_indexable(texture2darray)(float,float,float,float) r3.xyzw, r3.xyzx, t0.xyzw, s0
                add r2.xyzw, r2.xyzw, -r3.xyzw
                sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v2.xyxx, t1.xyzw, s0
                mad r2.xyzw, r4.xxxx, r2.xyzw, r3.xyzw
                add r1.xyzw, r1.xyzw, -r2.xyzw
                mad r1.xyzw, r4.yyyy, r1.xyzw, r2.xyzw
                add r0.xyzw, r0.xyzw, -r1.xyzw
                mad r0.xyzw, r4.zzzz, r0.xyzw, r1.xyzw
                mov r1.xy, v2.zwzz
                mov r1.z, l(4.000000)
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, r1.xyzx, t0.xyzw, s0
                add r1.xyzw, -r0.xyzw, r1.xyzw
                mad r0.xyzw, r4.wwww, r1.xyzw, r0.xyzw
                mov r1.xz, l(0,0,0,0)
                mov r1.y, cb0[16].y
                mov r1.w, -cb0[16].y
                add r1.xyzw, r1.xyzw, v2.xyxy
                sample_l_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t2.xyzw, s1, l(0.000000)
                sample_l_indexable(texture2d)(float,float,float,float) r1.y, r1.zwzz, t2.yxzw, s1, l(0.000000)
                add r1.x, -r1.y, r1.x
                mul r1.y, cb0[16].z, l(-2.000000)
                dp2 r1.w, r1.xyxx, r1.xyxx
                rsq r1.w, r1.w
                mov r1.z, l(0)
                mul r1.xyz, r1.wwww, r1.xyzx
                mov r2.x, -cb0[16].x
                mov r2.yw, l(0,0,0,0)
                mov r2.z, cb0[16].x
                add r2.xyzw, r2.xyzw, v2.xyxy
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t2.yzwx, s1, l(0.000000)
                sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t2.xyzw, s1, l(0.000000)
                add r2.y, -r1.w, r2.x
                mul r2.x, cb0[16].z, l(2.000000)
                dp2 r1.w, r2.xyxx, r2.xyxx
                rsq r1.w, r1.w
                mul r2.z, r1.w, r2.y
                add r2.w, cb0[16].z, cb0[16].z
                mul r2.y, r1.w, r2.w
                mov r2.x, l(0)
                mul r3.xyz, r1.xyzx, r2.xyzx
                mad r1.xyz, r2.zxyz, r1.yzxy, -r3.xyzx
                dp3 r1.w, cb0[3].xyzx, r1.xyzx
                add r1.w, r1.w, r1.w
                mad r2.xyz, r1.xyzx, -r1.wwww, cb0[3].xyzx
                dp3 r1.x, -cb0[3].xyzx, r1.xyzx
                add r1.yzw, -v1.xxyz, cb0[12].xxyz
                dp3 r2.w, r1.yzwy, r1.yzwy
                sqrt r2.w, r2.w
                div r1.yzw, r1.yyzw, r2.wwww
                dp3 r1.y, r2.xyzx, r1.yzwy
                max r1.y, r1.y, l(0.000000)
                log r1.y, r1.y
                mul r1.y, r1.y, cb1[6].w
                exp r1.y, r1.y
                mul r2.xyzw, r1.yyyy, cb1[6].xyzw
                mul r2.xyzw, r2.xyzw, cb0[2].xyzw
                lt r1.y, l(0.000000), r1.x
                mul r3.xyzw, r1.xxxx, cb1[5].xyzw
                mul r3.xyzw, r3.xyzw, cb0[1].xyzw
                and r3.xyzw, r1.yyyy, r3.xyzw
                and r1.xyzw, r2.xyzw, r1.yyyy
                mad r2.xyzw, cb1[4].xyzw, cb0[0].xyzw, r3.xyzw
                mad o0.xyzw, r0.xyzw, r2.xyzw, r1.xyzw
                ret 
                // Approximately 75 instruction slots used
                            
            };
        }

    }

    technique11 Light2
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input v0.xz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_temps 1
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0, l(0.000000)
                mov o0.y, r0.x
                mov o0.xz, v0.xxzx
                mov o1.xy, v1.xyxx
                mov o1.zw, v2.xxxy
                ret 
                // Approximately 6 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4
                //   float gMaxDist;                    // Offset:  244 Size:     4
                //   float gMinTess;                    // Offset:  248 Size:     4
                //   float gMaxTess;                    // Offset:  252 Size:     4
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float   x   
                // SV_TessFactor            1   x           1 QUADEDGE  float   x   
                // SV_TessFactor            2   x           2 QUADEDGE  float   x   
                // SV_TessFactor            3   x           3 QUADEDGE  float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT  float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[24], dynamicIndexed
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 1
                mov r0.x, vOutputControlPointID
                mov o0.xyz, v[r0.x + 0][0].xyzx
                mov o1.xy, v[r0.x + 0][1].xyxx
                ret 
                hs_fork_phase 
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 5
                mov r0.xz, vicp[2][0].xxzx
                mov r0.y, vicp[0][1].z
                mov r1.xz, vicp[1][0].xxzx
                mov r1.y, vicp[0][1].w
                add r2.xyz, r0.xyzx, r1.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                add r0.xyz, -r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mov r2.w, l(1.000000)
                mov r1.y, l(0)
                mov r1.zw, l(0,0,0,0)
                mov r0.w, l(0)
                loop 
                  ige r3.x, r1.w, l(6)
                  mov r0.w, l(0)
                  breakc_nz r3.x
                  dp3 r3.x, r0.xyzx, |cb0[r1.w + 18].xyzx|
                  dp4 r3.y, r2.xyzw, cb0[r1.w + 18].xyzw
                  add r3.x, r3.x, r3.y
                  lt r3.x, r3.x, l(0.000000)
                  if_nz r3.x
                    mov r1.z, l(-1)
                    mov r0.w, l(-1)
                    break 
                  endif 
                  iadd r1.x, r1.w, l(1)
                  mov r1.zw, r1.yyyx
                  mov r0.w, r3.x
                endloop 
                and r0.x, r1.z, r0.w
                if_nz r0.x
                  mov o0.x, l(0)
                  mov o1.x, l(0)
                  mov o2.x, l(0)
                  mov o3.x, l(0)
                  mov o4.x, l(0)
                  mov o5.x, l(0)
                  ret 
                else 
                  add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                  add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                  add r2.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                  add r3.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                  add r4.xyz, r1.xyzx, vicp[2][0].xyzx
                  add r4.xyz, r4.xyzx, vicp[3][0].xyzx
                  mad r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r0.x, r0.xyzx, r0.xyzx
                  sqrt r0.x, r0.x
                  add r0.x, r0.x, -cb0[15].x
                  add r0.yz, -cb0[15].xxwx, cb0[15].yyzy
                  div_sat r0.x, r0.x, r0.y
                  mad r0.x, r0.x, r0.z, cb0[15].w
                  exp r0.x, r0.x
                  mad r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r0.w, r1.xyzx, r1.xyzx
                  sqrt r0.w, r0.w
                  add r0.w, r0.w, -cb0[15].x
                  div_sat r0.w, r0.w, r0.y
                  mad r0.w, r0.w, r0.z, cb0[15].w
                  exp r0.w, r0.w
                  mad r1.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r1.x, r1.xyzx, r1.xyzx
                  sqrt r1.x, r1.x
                  add r1.x, r1.x, -cb0[15].x
                  div_sat r1.x, r1.x, r0.y
                  mad r1.x, r1.x, r0.z, cb0[15].w
                  exp r1.x, r1.x
                  mad r2.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r1.w, -cb0[15].x
                  div_sat r1.w, r1.w, r0.y
                  mad r1.w, r1.w, r0.z, cb0[15].w
                  exp r1.y, r1.w
                  mad r2.xyz, r4.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), -cb0[12].xyzx
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r1.w, -cb0[15].x
                  div_sat r0.y, r1.w, r0.y
                  mad r0.y, r0.y, r0.z, cb0[15].w
                  exp r1.z, r0.y
                  min o0.x, r0.x, l(64.000000)
                  min o1.x, r0.w, l(64.000000)
                  min r0.xyz, r1.xyzx, l(64.000000, 64.000000, 64.000000, 0.000000)
                  mov o2.x, r0.x
                  mov o3.x, r0.y
                  mov o4.x, r0.z
                  mov o5.x, r0.z
                  ret 
                endif 
                ret 
                // Approximately 95 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float       
                // SV_TessFactor            1   x           1 QUADEDGE  float       
                // SV_TessFactor            2   x           2 QUADEDGE  float       
                // SV_TessFactor            3   x           3 QUADEDGE  float       
                // SV_InsideTessFactor      0   x           4  QUADINT  float       
                // SV_InsideTessFactor      1   x           5  QUADINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_temps 2
                add r0.xy, -vicp[2][0].xzxx, vicp[3][0].xzxx
                mad r0.xy, vDomain.xxxx, r0.xyxx, vicp[2][0].xzxx
                add r0.zw, -vicp[0][0].xxxz, vicp[1][0].xxxz
                mad r0.zw, vDomain.xxxx, r0.zzzw, vicp[0][0].xxxz
                add r0.xy, -r0.zwzz, r0.xyxx
                mad r0.xz, vDomain.yyyy, r0.xxyx, r0.zzwz
                add r1.xy, -vicp[2][1].xyxx, vicp[3][1].xyxx
                mad r1.xy, vDomain.xxxx, r1.xyxx, vicp[2][1].xyxx
                add r1.zw, -vicp[0][1].xxxy, vicp[1][1].xxxy
                mad r1.zw, vDomain.xxxx, r1.zzzw, vicp[0][1].xxxy
                add r1.xy, -r1.zwzz, r1.xyxx
                mad r1.xy, vDomain.yyyy, r1.xyxx, r1.zwzz
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.xyxx, t0.yxzw, s0, l(0.000000)
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb1[0].xyzw
                dp4 o0.y, r0.xyzw, cb1[1].xyzw
                dp4 o0.z, r0.xyzw, cb1[2].xyzw
                dp4 o0.w, r0.xyzw, cb1[3].xyzw
                mov o1.xyz, r0.xyzx
                mul o2.zw, r1.xxxy, cb0[17].xxxy
                mov o2.xy, r1.xyxx
                ret 
                // Approximately 22 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4
                //   float gWorldCellSpace;             // Offset:  264 Size:     4
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samHeightmap                      sampler      NA          NA    1        1
                // gLayerMapArray                    texture  float4     2darray    0        1
                // gBlendMap                         texture  float4          2d    1        1
                // gHeightMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[7], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_output o0.xyzw
                dcl_temps 6
                mov r0.xy, v2.zwzz
                mov r0.z, l(3.000000)
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, r0.xyzx, t0.xyzw, s0
                mov r1.xy, v2.zwzz
                mov r1.z, l(2.000000)
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, r1.xyzx, t0.xyzw, s0
                mov r2.xy, v2.zwzz
                mov r2.z, l(1.000000)
                sample_indexable(texture2darray)(float,float,float,float) r2.xyzw, r2.xyzx, t0.xyzw, s0
                mov r3.xy, v2.zwzz
                mov r3.z, l(0)
                sample_indexable(texture2darray)(float,float,float,float) r3.xyzw, r3.xyzx, t0.xyzw, s0
                add r2.xyzw, r2.xyzw, -r3.xyzw
                sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v2.xyxx, t1.xyzw, s0
                mad r2.xyzw, r4.xxxx, r2.xyzw, r3.xyzw
                add r1.xyzw, r1.xyzw, -r2.xyzw
                mad r1.xyzw, r4.yyyy, r1.xyzw, r2.xyzw
                add r0.xyzw, r0.xyzw, -r1.xyzw
                mad r0.xyzw, r4.zzzz, r0.xyzw, r1.xyzw
                mov r1.xy, v2.zwzz
                mov r1.z, l(4.000000)
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, r1.xyzx, t0.xyzw, s0
                add r1.xyzw, -r0.xyzw, r1.xyzw
                mad r0.xyzw, r4.wwww, r1.xyzw, r0.xyzw
                mov r1.xz, l(0,0,0,0)
                mov r1.y, cb0[16].y
                mov r1.w, -cb0[16].y
                add r1.xyzw, r1.xyzw, v2.xyxy
                sample_l_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t2.xyzw, s1, l(0.000000)
                sample_l_indexable(texture2d)(float,float,float,float) r1.y, r1.zwzz, t2.yxzw, s1, l(0.000000)
                add r1.x, -r1.y, r1.x
                mul r1.y, cb0[16].z, l(-2.000000)
                dp2 r1.w, r1.xyxx, r1.xyxx
                rsq r1.w, r1.w
                mov r1.z, l(0)
                mul r1.xyz, r1.wwww, r1.xyzx
                mov r2.x, -cb0[16].x
                mov r2.yw, l(0,0,0,0)
                mov r2.z, cb0[16].x
                add r2.xyzw, r2.xyzw, v2.xyxy
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t2.yzwx, s1, l(0.000000)
                sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t2.xyzw, s1, l(0.000000)
                add r2.y, -r1.w, r2.x
                mul r2.x, cb0[16].z, l(2.000000)
                dp2 r1.w, r2.xyxx, r2.xyxx
                rsq r1.w, r1.w
                mul r2.z, r1.w, r2.y
                add r2.w, cb0[16].z, cb0[16].z
                mul r2.y, r1.w, r2.w
                mov r2.x, l(0)
                mul r3.xyz, r1.xyzx, r2.xyzx
                mad r1.xyz, r2.zxyz, r1.yzxy, -r3.xyzx
                dp3 r1.w, cb0[3].xyzx, r1.xyzx
                add r1.w, r1.w, r1.w
                mad r2.xyz, r1.xyzx, -r1.wwww, cb0[3].xyzx
                add r3.xyz, -v1.xyzx, cb0[12].xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r1.w, r1.w
                div r3.xyz, r3.xyzx, r1.wwww
                dp3 r1.w, r2.xyzx, r3.xyzx
                max r1.w, r1.w, l(0.000000)
                log r1.w, r1.w
                mul r1.w, r1.w, cb1[6].w
                exp r1.w, r1.w
                mul r2.xyzw, r1.wwww, cb1[6].xyzw
                mul r2.xyzw, r2.xyzw, cb0[2].xyzw
                dp3 r1.w, -cb0[3].xyzx, r1.xyzx
                lt r3.w, l(0.000000), r1.w
                mul r4.xyzw, r1.wwww, cb1[5].xyzw
                mul r4.xyzw, r4.xyzw, cb0[1].xyzw
                and r4.xyzw, r3.wwww, r4.xyzw
                and r2.xyzw, r2.xyzw, r3.wwww
                dp3 r1.w, cb0[7].xyzx, r1.xyzx
                add r1.w, r1.w, r1.w
                mad r5.xyz, r1.xyzx, -r1.wwww, cb0[7].xyzx
                dp3 r1.x, -cb0[7].xyzx, r1.xyzx
                dp3 r1.y, r5.xyzx, r3.xyzx
                max r1.y, r1.y, l(0.000000)
                log r1.y, r1.y
                mul r1.y, r1.y, cb1[6].w
                exp r1.y, r1.y
                mul r3.xyzw, r1.yyyy, cb1[6].xyzw
                mul r3.xyzw, r3.xyzw, cb0[6].xyzw
                lt r1.y, l(0.000000), r1.x
                mul r5.xyzw, r1.xxxx, cb1[5].xyzw
                mul r5.xyzw, r5.xyzw, cb0[5].xyzw
                and r5.xyzw, r1.yyyy, r5.xyzw
                and r1.xyzw, r3.xyzw, r1.yyyy
                add r1.xyzw, r1.xyzw, r2.xyzw
                add r2.xyzw, r4.xyzw, r5.xyzw
                mul r3.xyzw, cb0[4].xyzw, cb1[4].xyzw
                mad r3.xyzw, cb1[4].xyzw, cb0[0].xyzw, r3.xyzw
                add r2.xyzw, r2.xyzw, r3.xyzw
                mad o0.xyzw, r0.xyzw, r2.xyzw, r1.xyzw
                ret 
                // Approximately 95 instruction slots used
                            
            };
        }

    }

    technique11 Light3
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input v0.xz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_temps 1
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0, l(0.000000)
                mov o0.y, r0.x
                mov o0.xz, v0.xxzx
                mov o1.xy, v1.xyxx
                mov o1.zw, v2.xxxy
                ret 
                // Approximately 6 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4
                //   float gMaxDist;                    // Offset:  244 Size:     4
                //   float gMinTess;                    // Offset:  248 Size:     4
                //   float gMaxTess;                    // Offset:  252 Size:     4
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float   x   
                // SV_TessFactor            1   x           1 QUADEDGE  float   x   
                // SV_TessFactor            2   x           2 QUADEDGE  float   x   
                // SV_TessFactor            3   x           3 QUADEDGE  float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT  float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[24], dynamicIndexed
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 1
                mov r0.x, vOutputControlPointID
                mov o0.xyz, v[r0.x + 0][0].xyzx
                mov o1.xy, v[r0.x + 0][1].xyxx
                ret 
                hs_fork_phase 
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 5
                mov r0.xz, vicp[2][0].xxzx
                mov r0.y, vicp[0][1].z
                mov r1.xz, vicp[1][0].xxzx
                mov r1.y, vicp[0][1].w
                add r2.xyz, r0.xyzx, r1.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                add r0.xyz, -r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mov r2.w, l(1.000000)
                mov r1.y, l(0)
                mov r1.zw, l(0,0,0,0)
                mov r0.w, l(0)
                loop 
                  ige r3.x, r1.w, l(6)
                  mov r0.w, l(0)
                  breakc_nz r3.x
                  dp3 r3.x, r0.xyzx, |cb0[r1.w + 18].xyzx|
                  dp4 r3.y, r2.xyzw, cb0[r1.w + 18].xyzw
                  add r3.x, r3.x, r3.y
                  lt r3.x, r3.x, l(0.000000)
                  if_nz r3.x
                    mov r1.z, l(-1)
                    mov r0.w, l(-1)
                    break 
                  endif 
                  iadd r1.x, r1.w, l(1)
                  mov r1.zw, r1.yyyx
                  mov r0.w, r3.x
                endloop 
                and r0.x, r1.z, r0.w
                if_nz r0.x
                  mov o0.x, l(0)
                  mov o1.x, l(0)
                  mov o2.x, l(0)
                  mov o3.x, l(0)
                  mov o4.x, l(0)
                  mov o5.x, l(0)
                  ret 
                else 
                  add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                  add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                  add r2.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                  add r3.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                  add r4.xyz, r1.xyzx, vicp[2][0].xyzx
                  add r4.xyz, r4.xyzx, vicp[3][0].xyzx
                  mad r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r0.x, r0.xyzx, r0.xyzx
                  sqrt r0.x, r0.x
                  add r0.x, r0.x, -cb0[15].x
                  add r0.yz, -cb0[15].xxwx, cb0[15].yyzy
                  div_sat r0.x, r0.x, r0.y
                  mad r0.x, r0.x, r0.z, cb0[15].w
                  exp r0.x, r0.x
                  mad r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r0.w, r1.xyzx, r1.xyzx
                  sqrt r0.w, r0.w
                  add r0.w, r0.w, -cb0[15].x
                  div_sat r0.w, r0.w, r0.y
                  mad r0.w, r0.w, r0.z, cb0[15].w
                  exp r0.w, r0.w
                  mad r1.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r1.x, r1.xyzx, r1.xyzx
                  sqrt r1.x, r1.x
                  add r1.x, r1.x, -cb0[15].x
                  div_sat r1.x, r1.x, r0.y
                  mad r1.x, r1.x, r0.z, cb0[15].w
                  exp r1.x, r1.x
                  mad r2.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r1.w, -cb0[15].x
                  div_sat r1.w, r1.w, r0.y
                  mad r1.w, r1.w, r0.z, cb0[15].w
                  exp r1.y, r1.w
                  mad r2.xyz, r4.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), -cb0[12].xyzx
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r1.w, -cb0[15].x
                  div_sat r0.y, r1.w, r0.y
                  mad r0.y, r0.y, r0.z, cb0[15].w
                  exp r1.z, r0.y
                  min o0.x, r0.x, l(64.000000)
                  min o1.x, r0.w, l(64.000000)
                  min r0.xyz, r1.xyzx, l(64.000000, 64.000000, 64.000000, 0.000000)
                  mov o2.x, r0.x
                  mov o3.x, r0.y
                  mov o4.x, r0.z
                  mov o5.x, r0.z
                  ret 
                endif 
                ret 
                // Approximately 95 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float       
                // SV_TessFactor            1   x           1 QUADEDGE  float       
                // SV_TessFactor            2   x           2 QUADEDGE  float       
                // SV_TessFactor            3   x           3 QUADEDGE  float       
                // SV_InsideTessFactor      0   x           4  QUADINT  float       
                // SV_InsideTessFactor      1   x           5  QUADINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_temps 2
                add r0.xy, -vicp[2][0].xzxx, vicp[3][0].xzxx
                mad r0.xy, vDomain.xxxx, r0.xyxx, vicp[2][0].xzxx
                add r0.zw, -vicp[0][0].xxxz, vicp[1][0].xxxz
                mad r0.zw, vDomain.xxxx, r0.zzzw, vicp[0][0].xxxz
                add r0.xy, -r0.zwzz, r0.xyxx
                mad r0.xz, vDomain.yyyy, r0.xxyx, r0.zzwz
                add r1.xy, -vicp[2][1].xyxx, vicp[3][1].xyxx
                mad r1.xy, vDomain.xxxx, r1.xyxx, vicp[2][1].xyxx
                add r1.zw, -vicp[0][1].xxxy, vicp[1][1].xxxy
                mad r1.zw, vDomain.xxxx, r1.zzzw, vicp[0][1].xxxy
                add r1.xy, -r1.zwzz, r1.xyxx
                mad r1.xy, vDomain.yyyy, r1.xyxx, r1.zwzz
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.xyxx, t0.yxzw, s0, l(0.000000)
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb1[0].xyzw
                dp4 o0.y, r0.xyzw, cb1[1].xyzw
                dp4 o0.z, r0.xyzw, cb1[2].xyzw
                dp4 o0.w, r0.xyzw, cb1[3].xyzw
                mov o1.xyz, r0.xyzx
                mul o2.zw, r1.xxxy, cb0[17].xxxy
                mov o2.xy, r1.xyxx
                ret 
                // Approximately 22 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4
                //   float gWorldCellSpace;             // Offset:  264 Size:     4
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samHeightmap                      sampler      NA          NA    1        1
                // gLayerMapArray                    texture  float4     2darray    0        1
                // gBlendMap                         texture  float4          2d    1        1
                // gHeightMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[7], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_output o0.xyzw
                dcl_temps 7
                mov r0.xy, v2.zwzz
                mov r0.z, l(3.000000)
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, r0.xyzx, t0.xyzw, s0
                mov r1.xy, v2.zwzz
                mov r1.z, l(2.000000)
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, r1.xyzx, t0.xyzw, s0
                mov r2.xy, v2.zwzz
                mov r2.z, l(1.000000)
                sample_indexable(texture2darray)(float,float,float,float) r2.xyzw, r2.xyzx, t0.xyzw, s0
                mov r3.xy, v2.zwzz
                mov r3.z, l(0)
                sample_indexable(texture2darray)(float,float,float,float) r3.xyzw, r3.xyzx, t0.xyzw, s0
                add r2.xyzw, r2.xyzw, -r3.xyzw
                sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v2.xyxx, t1.xyzw, s0
                mad r2.xyzw, r4.xxxx, r2.xyzw, r3.xyzw
                add r1.xyzw, r1.xyzw, -r2.xyzw
                mad r1.xyzw, r4.yyyy, r1.xyzw, r2.xyzw
                add r0.xyzw, r0.xyzw, -r1.xyzw
                mad r0.xyzw, r4.zzzz, r0.xyzw, r1.xyzw
                mov r1.xy, v2.zwzz
                mov r1.z, l(4.000000)
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, r1.xyzx, t0.xyzw, s0
                add r1.xyzw, -r0.xyzw, r1.xyzw
                mad r0.xyzw, r4.wwww, r1.xyzw, r0.xyzw
                mov r1.xz, l(0,0,0,0)
                mov r1.y, cb0[16].y
                mov r1.w, -cb0[16].y
                add r1.xyzw, r1.xyzw, v2.xyxy
                sample_l_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t2.xyzw, s1, l(0.000000)
                sample_l_indexable(texture2d)(float,float,float,float) r1.y, r1.zwzz, t2.yxzw, s1, l(0.000000)
                add r1.x, -r1.y, r1.x
                mul r1.y, cb0[16].z, l(-2.000000)
                dp2 r1.w, r1.xyxx, r1.xyxx
                rsq r1.w, r1.w
                mov r1.z, l(0)
                mul r1.xyz, r1.wwww, r1.xyzx
                mov r2.x, -cb0[16].x
                mov r2.yw, l(0,0,0,0)
                mov r2.z, cb0[16].x
                add r2.xyzw, r2.xyzw, v2.xyxy
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t2.yzwx, s1, l(0.000000)
                sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t2.xyzw, s1, l(0.000000)
                add r2.y, -r1.w, r2.x
                mul r2.x, cb0[16].z, l(2.000000)
                dp2 r1.w, r2.xyxx, r2.xyxx
                rsq r1.w, r1.w
                mul r2.z, r1.w, r2.y
                add r2.w, cb0[16].z, cb0[16].z
                mul r2.y, r1.w, r2.w
                mov r2.x, l(0)
                mul r3.xyz, r1.xyzx, r2.xyzx
                mad r1.xyz, r2.zxyz, r1.yzxy, -r3.xyzx
                dp3 r1.w, cb0[3].xyzx, r1.xyzx
                add r1.w, r1.w, r1.w
                mad r2.xyz, r1.xyzx, -r1.wwww, cb0[3].xyzx
                add r3.xyz, -v1.xyzx, cb0[12].xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r1.w, r1.w
                div r3.xyz, r3.xyzx, r1.wwww
                dp3 r1.w, r2.xyzx, r3.xyzx
                max r1.w, r1.w, l(0.000000)
                log r1.w, r1.w
                mul r1.w, r1.w, cb1[6].w
                exp r1.w, r1.w
                mul r2.xyzw, r1.wwww, cb1[6].xyzw
                mul r2.xyzw, r2.xyzw, cb0[2].xyzw
                dp3 r1.w, -cb0[3].xyzx, r1.xyzx
                lt r3.w, l(0.000000), r1.w
                mul r4.xyzw, r1.wwww, cb1[5].xyzw
                mul r4.xyzw, r4.xyzw, cb0[1].xyzw
                and r4.xyzw, r3.wwww, r4.xyzw
                and r2.xyzw, r2.xyzw, r3.wwww
                dp3 r1.w, cb0[7].xyzx, r1.xyzx
                add r1.w, r1.w, r1.w
                mad r5.xyz, r1.xyzx, -r1.wwww, cb0[7].xyzx
                dp3 r1.w, r5.xyzx, r3.xyzx
                max r1.w, r1.w, l(0.000000)
                log r1.w, r1.w
                mul r1.w, r1.w, cb1[6].w
                exp r1.w, r1.w
                mul r5.xyzw, r1.wwww, cb1[6].xyzw
                mul r5.xyzw, r5.xyzw, cb0[6].xyzw
                dp3 r1.w, -cb0[7].xyzx, r1.xyzx
                lt r3.w, l(0.000000), r1.w
                mul r6.xyzw, r1.wwww, cb1[5].xyzw
                mul r6.xyzw, r6.xyzw, cb0[5].xyzw
                and r6.xyzw, r3.wwww, r6.xyzw
                and r5.xyzw, r5.xyzw, r3.wwww
                add r2.xyzw, r2.xyzw, r5.xyzw
                add r4.xyzw, r4.xyzw, r6.xyzw
                dp3 r1.w, cb0[11].xyzx, r1.xyzx
                add r1.w, r1.w, r1.w
                mad r5.xyz, r1.xyzx, -r1.wwww, cb0[11].xyzx
                dp3 r1.x, -cb0[11].xyzx, r1.xyzx
                dp3 r1.y, r5.xyzx, r3.xyzx
                max r1.y, r1.y, l(0.000000)
                log r1.y, r1.y
                mul r1.y, r1.y, cb1[6].w
                exp r1.y, r1.y
                mul r3.xyzw, r1.yyyy, cb1[6].xyzw
                mul r3.xyzw, r3.xyzw, cb0[10].xyzw
                lt r1.y, l(0.000000), r1.x
                mul r5.xyzw, r1.xxxx, cb1[5].xyzw
                mul r5.xyzw, r5.xyzw, cb0[9].xyzw
                and r5.xyzw, r1.yyyy, r5.xyzw
                and r1.xyzw, r3.xyzw, r1.yyyy
                add r1.xyzw, r1.xyzw, r2.xyzw
                add r2.xyzw, r4.xyzw, r5.xyzw
                mul r3.xyzw, cb0[4].xyzw, cb1[4].xyzw
                mad r3.xyzw, cb1[4].xyzw, cb0[0].xyzw, r3.xyzw
                mad r3.xyzw, cb1[4].xyzw, cb0[8].xyzw, r3.xyzw
                add r2.xyzw, r2.xyzw, r3.xyzw
                mad o0.xyzw, r0.xyzw, r2.xyzw, r1.xyzw
                ret 
                // Approximately 114 instruction slots used
                            
            };
        }

    }

    technique11 Light1Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input v0.xz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_temps 1
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0, l(0.000000)
                mov o0.y, r0.x
                mov o0.xz, v0.xxzx
                mov o1.xy, v1.xyxx
                mov o1.zw, v2.xxxy
                ret 
                // Approximately 6 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4
                //   float gMaxDist;                    // Offset:  244 Size:     4
                //   float gMinTess;                    // Offset:  248 Size:     4
                //   float gMaxTess;                    // Offset:  252 Size:     4
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float   x   
                // SV_TessFactor            1   x           1 QUADEDGE  float   x   
                // SV_TessFactor            2   x           2 QUADEDGE  float   x   
                // SV_TessFactor            3   x           3 QUADEDGE  float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT  float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[24], dynamicIndexed
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 1
                mov r0.x, vOutputControlPointID
                mov o0.xyz, v[r0.x + 0][0].xyzx
                mov o1.xy, v[r0.x + 0][1].xyxx
                ret 
                hs_fork_phase 
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 5
                mov r0.xz, vicp[2][0].xxzx
                mov r0.y, vicp[0][1].z
                mov r1.xz, vicp[1][0].xxzx
                mov r1.y, vicp[0][1].w
                add r2.xyz, r0.xyzx, r1.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                add r0.xyz, -r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mov r2.w, l(1.000000)
                mov r1.y, l(0)
                mov r1.zw, l(0,0,0,0)
                mov r0.w, l(0)
                loop 
                  ige r3.x, r1.w, l(6)
                  mov r0.w, l(0)
                  breakc_nz r3.x
                  dp3 r3.x, r0.xyzx, |cb0[r1.w + 18].xyzx|
                  dp4 r3.y, r2.xyzw, cb0[r1.w + 18].xyzw
                  add r3.x, r3.x, r3.y
                  lt r3.x, r3.x, l(0.000000)
                  if_nz r3.x
                    mov r1.z, l(-1)
                    mov r0.w, l(-1)
                    break 
                  endif 
                  iadd r1.x, r1.w, l(1)
                  mov r1.zw, r1.yyyx
                  mov r0.w, r3.x
                endloop 
                and r0.x, r1.z, r0.w
                if_nz r0.x
                  mov o0.x, l(0)
                  mov o1.x, l(0)
                  mov o2.x, l(0)
                  mov o3.x, l(0)
                  mov o4.x, l(0)
                  mov o5.x, l(0)
                  ret 
                else 
                  add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                  add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                  add r2.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                  add r3.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                  add r4.xyz, r1.xyzx, vicp[2][0].xyzx
                  add r4.xyz, r4.xyzx, vicp[3][0].xyzx
                  mad r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r0.x, r0.xyzx, r0.xyzx
                  sqrt r0.x, r0.x
                  add r0.x, r0.x, -cb0[15].x
                  add r0.yz, -cb0[15].xxwx, cb0[15].yyzy
                  div_sat r0.x, r0.x, r0.y
                  mad r0.x, r0.x, r0.z, cb0[15].w
                  exp r0.x, r0.x
                  mad r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r0.w, r1.xyzx, r1.xyzx
                  sqrt r0.w, r0.w
                  add r0.w, r0.w, -cb0[15].x
                  div_sat r0.w, r0.w, r0.y
                  mad r0.w, r0.w, r0.z, cb0[15].w
                  exp r0.w, r0.w
                  mad r1.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r1.x, r1.xyzx, r1.xyzx
                  sqrt r1.x, r1.x
                  add r1.x, r1.x, -cb0[15].x
                  div_sat r1.x, r1.x, r0.y
                  mad r1.x, r1.x, r0.z, cb0[15].w
                  exp r1.x, r1.x
                  mad r2.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r1.w, -cb0[15].x
                  div_sat r1.w, r1.w, r0.y
                  mad r1.w, r1.w, r0.z, cb0[15].w
                  exp r1.y, r1.w
                  mad r2.xyz, r4.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), -cb0[12].xyzx
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r1.w, -cb0[15].x
                  div_sat r0.y, r1.w, r0.y
                  mad r0.y, r0.y, r0.z, cb0[15].w
                  exp r1.z, r0.y
                  min o0.x, r0.x, l(64.000000)
                  min o1.x, r0.w, l(64.000000)
                  min r0.xyz, r1.xyzx, l(64.000000, 64.000000, 64.000000, 0.000000)
                  mov o2.x, r0.x
                  mov o3.x, r0.y
                  mov o4.x, r0.z
                  mov o5.x, r0.z
                  ret 
                endif 
                ret 
                // Approximately 95 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float       
                // SV_TessFactor            1   x           1 QUADEDGE  float       
                // SV_TessFactor            2   x           2 QUADEDGE  float       
                // SV_TessFactor            3   x           3 QUADEDGE  float       
                // SV_InsideTessFactor      0   x           4  QUADINT  float       
                // SV_InsideTessFactor      1   x           5  QUADINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_temps 2
                add r0.xy, -vicp[2][0].xzxx, vicp[3][0].xzxx
                mad r0.xy, vDomain.xxxx, r0.xyxx, vicp[2][0].xzxx
                add r0.zw, -vicp[0][0].xxxz, vicp[1][0].xxxz
                mad r0.zw, vDomain.xxxx, r0.zzzw, vicp[0][0].xxxz
                add r0.xy, -r0.zwzz, r0.xyxx
                mad r0.xz, vDomain.yyyy, r0.xxyx, r0.zzwz
                add r1.xy, -vicp[2][1].xyxx, vicp[3][1].xyxx
                mad r1.xy, vDomain.xxxx, r1.xyxx, vicp[2][1].xyxx
                add r1.zw, -vicp[0][1].xxxy, vicp[1][1].xxxy
                mad r1.zw, vDomain.xxxx, r1.zzzw, vicp[0][1].xxxy
                add r1.xy, -r1.zwzz, r1.xyxx
                mad r1.xy, vDomain.yyyy, r1.xyxx, r1.zwzz
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.xyxx, t0.yxzw, s0, l(0.000000)
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb1[0].xyzw
                dp4 o0.y, r0.xyzw, cb1[1].xyzw
                dp4 o0.z, r0.xyzw, cb1[2].xyzw
                dp4 o0.w, r0.xyzw, cb1[3].xyzw
                mov o1.xyz, r0.xyzx
                mul o2.zw, r1.xxxy, cb0[17].xxxy
                mov o2.xy, r1.xyxx
                ret 
                // Approximately 22 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4
                //   float gWorldCellSpace;             // Offset:  264 Size:     4
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samHeightmap                      sampler      NA          NA    1        1
                // gLayerMapArray                    texture  float4     2darray    0        1
                // gBlendMap                         texture  float4          2d    1        1
                // gHeightMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[7], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_output o0.xyzw
                dcl_temps 5
                mov r0.xy, v2.zwzz
                mov r0.z, l(3.000000)
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, r0.xyzx, t0.xyzw, s0
                mov r1.xy, v2.zwzz
                mov r1.z, l(2.000000)
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, r1.xyzx, t0.xyzw, s0
                mov r2.xy, v2.zwzz
                mov r2.z, l(1.000000)
                sample_indexable(texture2darray)(float,float,float,float) r2.xyzw, r2.xyzx, t0.xyzw, s0
                mov r3.xy, v2.zwzz
                mov r3.z, l(0)
                sample_indexable(texture2darray)(float,float,float,float) r3.xyzw, r3.xyzx, t0.xyzw, s0
                add r2.xyzw, r2.xyzw, -r3.xyzw
                sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v2.xyxx, t1.xyzw, s0
                mad r2.xyzw, r4.xxxx, r2.xyzw, r3.xyzw
                add r1.xyzw, r1.xyzw, -r2.xyzw
                mad r1.xyzw, r4.yyyy, r1.xyzw, r2.xyzw
                add r0.xyzw, r0.xyzw, -r1.xyzw
                mad r0.xyzw, r4.zzzz, r0.xyzw, r1.xyzw
                mov r1.xy, v2.zwzz
                mov r1.z, l(4.000000)
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, r1.xyzx, t0.xyzw, s0
                add r1.xyzw, -r0.xyzw, r1.xyzw
                mad r0.xyzw, r4.wwww, r1.xyzw, r0.xyzw
                mov r1.xz, l(0,0,0,0)
                mov r1.y, cb0[16].y
                mov r1.w, -cb0[16].y
                add r1.xyzw, r1.xyzw, v2.xyxy
                sample_l_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t2.xyzw, s1, l(0.000000)
                sample_l_indexable(texture2d)(float,float,float,float) r1.y, r1.zwzz, t2.yxzw, s1, l(0.000000)
                add r1.x, -r1.y, r1.x
                mul r1.y, cb0[16].z, l(-2.000000)
                dp2 r1.w, r1.xyxx, r1.xyxx
                rsq r1.w, r1.w
                mov r1.z, l(0)
                mul r1.xyz, r1.wwww, r1.xyzx
                mov r2.x, -cb0[16].x
                mov r2.yw, l(0,0,0,0)
                mov r2.z, cb0[16].x
                add r2.xyzw, r2.xyzw, v2.xyxy
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t2.yzwx, s1, l(0.000000)
                sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t2.xyzw, s1, l(0.000000)
                add r2.y, -r1.w, r2.x
                mul r2.x, cb0[16].z, l(2.000000)
                dp2 r1.w, r2.xyxx, r2.xyxx
                rsq r1.w, r1.w
                mul r2.z, r1.w, r2.y
                add r2.w, cb0[16].z, cb0[16].z
                mul r2.y, r1.w, r2.w
                mov r2.x, l(0)
                mul r3.xyz, r1.xyzx, r2.xyzx
                mad r1.xyz, r2.zxyz, r1.yzxy, -r3.xyzx
                dp3 r1.w, cb0[3].xyzx, r1.xyzx
                add r1.w, r1.w, r1.w
                mad r2.xyz, r1.xyzx, -r1.wwww, cb0[3].xyzx
                dp3 r1.x, -cb0[3].xyzx, r1.xyzx
                add r1.yzw, -v1.xxyz, cb0[12].xxyz
                dp3 r2.w, r1.yzwy, r1.yzwy
                sqrt r2.w, r2.w
                div r1.yzw, r1.yyzw, r2.wwww
                add r2.w, r2.w, -cb0[12].w
                div_sat r2.w, r2.w, cb0[13].x
                dp3 r1.y, r2.xyzx, r1.yzwy
                max r1.y, r1.y, l(0.000000)
                log r1.y, r1.y
                mul r1.y, r1.y, cb1[6].w
                exp r1.y, r1.y
                mul r3.xyzw, r1.yyyy, cb1[6].xyzw
                mul r3.xyzw, r3.xyzw, cb0[2].xyzw
                lt r1.y, l(0.000000), r1.x
                mul r4.xyzw, r1.xxxx, cb1[5].xyzw
                mul r4.xyzw, r4.xyzw, cb0[1].xyzw
                and r4.xyzw, r1.yyyy, r4.xyzw
                and r1.xyzw, r3.xyzw, r1.yyyy
                mad r3.xyzw, cb1[4].xyzw, cb0[0].xyzw, r4.xyzw
                mad r0.xyzw, r0.xyzw, r3.xyzw, r1.xyzw
                add r1.xyzw, -r0.xyzw, cb0[14].xyzw
                mad o0.xyzw, r2.wwww, r1.xyzw, r0.xyzw
                ret 
                // Approximately 79 instruction slots used
                            
            };
        }

    }

    technique11 Light2Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input v0.xz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_temps 1
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0, l(0.000000)
                mov o0.y, r0.x
                mov o0.xz, v0.xxzx
                mov o1.xy, v1.xyxx
                mov o1.zw, v2.xxxy
                ret 
                // Approximately 6 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4
                //   float gMaxDist;                    // Offset:  244 Size:     4
                //   float gMinTess;                    // Offset:  248 Size:     4
                //   float gMaxTess;                    // Offset:  252 Size:     4
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float   x   
                // SV_TessFactor            1   x           1 QUADEDGE  float   x   
                // SV_TessFactor            2   x           2 QUADEDGE  float   x   
                // SV_TessFactor            3   x           3 QUADEDGE  float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT  float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[24], dynamicIndexed
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 1
                mov r0.x, vOutputControlPointID
                mov o0.xyz, v[r0.x + 0][0].xyzx
                mov o1.xy, v[r0.x + 0][1].xyxx
                ret 
                hs_fork_phase 
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 5
                mov r0.xz, vicp[2][0].xxzx
                mov r0.y, vicp[0][1].z
                mov r1.xz, vicp[1][0].xxzx
                mov r1.y, vicp[0][1].w
                add r2.xyz, r0.xyzx, r1.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                add r0.xyz, -r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mov r2.w, l(1.000000)
                mov r1.y, l(0)
                mov r1.zw, l(0,0,0,0)
                mov r0.w, l(0)
                loop 
                  ige r3.x, r1.w, l(6)
                  mov r0.w, l(0)
                  breakc_nz r3.x
                  dp3 r3.x, r0.xyzx, |cb0[r1.w + 18].xyzx|
                  dp4 r3.y, r2.xyzw, cb0[r1.w + 18].xyzw
                  add r3.x, r3.x, r3.y
                  lt r3.x, r3.x, l(0.000000)
                  if_nz r3.x
                    mov r1.z, l(-1)
                    mov r0.w, l(-1)
                    break 
                  endif 
                  iadd r1.x, r1.w, l(1)
                  mov r1.zw, r1.yyyx
                  mov r0.w, r3.x
                endloop 
                and r0.x, r1.z, r0.w
                if_nz r0.x
                  mov o0.x, l(0)
                  mov o1.x, l(0)
                  mov o2.x, l(0)
                  mov o3.x, l(0)
                  mov o4.x, l(0)
                  mov o5.x, l(0)
                  ret 
                else 
                  add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                  add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                  add r2.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                  add r3.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                  add r4.xyz, r1.xyzx, vicp[2][0].xyzx
                  add r4.xyz, r4.xyzx, vicp[3][0].xyzx
                  mad r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r0.x, r0.xyzx, r0.xyzx
                  sqrt r0.x, r0.x
                  add r0.x, r0.x, -cb0[15].x
                  add r0.yz, -cb0[15].xxwx, cb0[15].yyzy
                  div_sat r0.x, r0.x, r0.y
                  mad r0.x, r0.x, r0.z, cb0[15].w
                  exp r0.x, r0.x
                  mad r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r0.w, r1.xyzx, r1.xyzx
                  sqrt r0.w, r0.w
                  add r0.w, r0.w, -cb0[15].x
                  div_sat r0.w, r0.w, r0.y
                  mad r0.w, r0.w, r0.z, cb0[15].w
                  exp r0.w, r0.w
                  mad r1.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r1.x, r1.xyzx, r1.xyzx
                  sqrt r1.x, r1.x
                  add r1.x, r1.x, -cb0[15].x
                  div_sat r1.x, r1.x, r0.y
                  mad r1.x, r1.x, r0.z, cb0[15].w
                  exp r1.x, r1.x
                  mad r2.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r1.w, -cb0[15].x
                  div_sat r1.w, r1.w, r0.y
                  mad r1.w, r1.w, r0.z, cb0[15].w
                  exp r1.y, r1.w
                  mad r2.xyz, r4.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), -cb0[12].xyzx
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r1.w, -cb0[15].x
                  div_sat r0.y, r1.w, r0.y
                  mad r0.y, r0.y, r0.z, cb0[15].w
                  exp r1.z, r0.y
                  min o0.x, r0.x, l(64.000000)
                  min o1.x, r0.w, l(64.000000)
                  min r0.xyz, r1.xyzx, l(64.000000, 64.000000, 64.000000, 0.000000)
                  mov o2.x, r0.x
                  mov o3.x, r0.y
                  mov o4.x, r0.z
                  mov o5.x, r0.z
                  ret 
                endif 
                ret 
                // Approximately 95 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float       
                // SV_TessFactor            1   x           1 QUADEDGE  float       
                // SV_TessFactor            2   x           2 QUADEDGE  float       
                // SV_TessFactor            3   x           3 QUADEDGE  float       
                // SV_InsideTessFactor      0   x           4  QUADINT  float       
                // SV_InsideTessFactor      1   x           5  QUADINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_temps 2
                add r0.xy, -vicp[2][0].xzxx, vicp[3][0].xzxx
                mad r0.xy, vDomain.xxxx, r0.xyxx, vicp[2][0].xzxx
                add r0.zw, -vicp[0][0].xxxz, vicp[1][0].xxxz
                mad r0.zw, vDomain.xxxx, r0.zzzw, vicp[0][0].xxxz
                add r0.xy, -r0.zwzz, r0.xyxx
                mad r0.xz, vDomain.yyyy, r0.xxyx, r0.zzwz
                add r1.xy, -vicp[2][1].xyxx, vicp[3][1].xyxx
                mad r1.xy, vDomain.xxxx, r1.xyxx, vicp[2][1].xyxx
                add r1.zw, -vicp[0][1].xxxy, vicp[1][1].xxxy
                mad r1.zw, vDomain.xxxx, r1.zzzw, vicp[0][1].xxxy
                add r1.xy, -r1.zwzz, r1.xyxx
                mad r1.xy, vDomain.yyyy, r1.xyxx, r1.zwzz
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.xyxx, t0.yxzw, s0, l(0.000000)
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb1[0].xyzw
                dp4 o0.y, r0.xyzw, cb1[1].xyzw
                dp4 o0.z, r0.xyzw, cb1[2].xyzw
                dp4 o0.w, r0.xyzw, cb1[3].xyzw
                mov o1.xyz, r0.xyzx
                mul o2.zw, r1.xxxy, cb0[17].xxxy
                mov o2.xy, r1.xyxx
                ret 
                // Approximately 22 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4
                //   float gWorldCellSpace;             // Offset:  264 Size:     4
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samHeightmap                      sampler      NA          NA    1        1
                // gLayerMapArray                    texture  float4     2darray    0        1
                // gBlendMap                         texture  float4          2d    1        1
                // gHeightMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[7], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_output o0.xyzw
                dcl_temps 6
                mov r0.xy, v2.zwzz
                mov r0.z, l(3.000000)
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, r0.xyzx, t0.xyzw, s0
                mov r1.xy, v2.zwzz
                mov r1.z, l(2.000000)
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, r1.xyzx, t0.xyzw, s0
                mov r2.xy, v2.zwzz
                mov r2.z, l(1.000000)
                sample_indexable(texture2darray)(float,float,float,float) r2.xyzw, r2.xyzx, t0.xyzw, s0
                mov r3.xy, v2.zwzz
                mov r3.z, l(0)
                sample_indexable(texture2darray)(float,float,float,float) r3.xyzw, r3.xyzx, t0.xyzw, s0
                add r2.xyzw, r2.xyzw, -r3.xyzw
                sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v2.xyxx, t1.xyzw, s0
                mad r2.xyzw, r4.xxxx, r2.xyzw, r3.xyzw
                add r1.xyzw, r1.xyzw, -r2.xyzw
                mad r1.xyzw, r4.yyyy, r1.xyzw, r2.xyzw
                add r0.xyzw, r0.xyzw, -r1.xyzw
                mad r0.xyzw, r4.zzzz, r0.xyzw, r1.xyzw
                mov r1.xy, v2.zwzz
                mov r1.z, l(4.000000)
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, r1.xyzx, t0.xyzw, s0
                add r1.xyzw, -r0.xyzw, r1.xyzw
                mad r0.xyzw, r4.wwww, r1.xyzw, r0.xyzw
                mov r1.xz, l(0,0,0,0)
                mov r1.y, cb0[16].y
                mov r1.w, -cb0[16].y
                add r1.xyzw, r1.xyzw, v2.xyxy
                sample_l_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t2.xyzw, s1, l(0.000000)
                sample_l_indexable(texture2d)(float,float,float,float) r1.y, r1.zwzz, t2.yxzw, s1, l(0.000000)
                add r1.x, -r1.y, r1.x
                mul r1.y, cb0[16].z, l(-2.000000)
                dp2 r1.w, r1.xyxx, r1.xyxx
                rsq r1.w, r1.w
                mov r1.z, l(0)
                mul r1.xyz, r1.wwww, r1.xyzx
                mov r2.x, -cb0[16].x
                mov r2.yw, l(0,0,0,0)
                mov r2.z, cb0[16].x
                add r2.xyzw, r2.xyzw, v2.xyxy
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t2.yzwx, s1, l(0.000000)
                sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t2.xyzw, s1, l(0.000000)
                add r2.y, -r1.w, r2.x
                mul r2.x, cb0[16].z, l(2.000000)
                dp2 r1.w, r2.xyxx, r2.xyxx
                rsq r1.w, r1.w
                mul r2.z, r1.w, r2.y
                add r2.w, cb0[16].z, cb0[16].z
                mul r2.y, r1.w, r2.w
                mov r2.x, l(0)
                mul r3.xyz, r1.xyzx, r2.xyzx
                mad r1.xyz, r2.zxyz, r1.yzxy, -r3.xyzx
                dp3 r1.w, cb0[3].xyzx, r1.xyzx
                add r1.w, r1.w, r1.w
                mad r2.xyz, r1.xyzx, -r1.wwww, cb0[3].xyzx
                add r3.xyz, -v1.xyzx, cb0[12].xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r1.w, r1.w
                div r3.xyz, r3.xyzx, r1.wwww
                add r1.w, r1.w, -cb0[12].w
                div_sat r1.w, r1.w, cb0[13].x
                dp3 r2.x, r2.xyzx, r3.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, cb1[6].w
                exp r2.x, r2.x
                mul r2.xyzw, r2.xxxx, cb1[6].xyzw
                mul r2.xyzw, r2.xyzw, cb0[2].xyzw
                dp3 r3.w, -cb0[3].xyzx, r1.xyzx
                lt r4.x, l(0.000000), r3.w
                mul r5.xyzw, r3.wwww, cb1[5].xyzw
                mul r5.xyzw, r5.xyzw, cb0[1].xyzw
                and r5.xyzw, r4.xxxx, r5.xyzw
                and r2.xyzw, r2.xyzw, r4.xxxx
                dp3 r3.w, cb0[7].xyzx, r1.xyzx
                add r3.w, r3.w, r3.w
                mad r4.xyz, r1.xyzx, -r3.wwww, cb0[7].xyzx
                dp3 r1.x, -cb0[7].xyzx, r1.xyzx
                dp3 r1.y, r4.xyzx, r3.xyzx
                max r1.y, r1.y, l(0.000000)
                log r1.y, r1.y
                mul r1.y, r1.y, cb1[6].w
                exp r1.y, r1.y
                mul r3.xyzw, r1.yyyy, cb1[6].xyzw
                mul r3.xyzw, r3.xyzw, cb0[6].xyzw
                lt r1.y, l(0.000000), r1.x
                mul r4.xyzw, r1.xxxx, cb1[5].xyzw
                mul r4.xyzw, r4.xyzw, cb0[5].xyzw
                and r4.xyzw, r1.yyyy, r4.xyzw
                and r3.xyzw, r3.xyzw, r1.yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw
                add r3.xyzw, r4.xyzw, r5.xyzw
                mul r4.xyzw, cb0[4].xyzw, cb1[4].xyzw
                mad r4.xyzw, cb1[4].xyzw, cb0[0].xyzw, r4.xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw
                mad r0.xyzw, r0.xyzw, r3.xyzw, r2.xyzw
                add r2.xyzw, -r0.xyzw, cb0[14].xyzw
                mad o0.xyzw, r1.wwww, r2.xyzw, r0.xyzw
                ret 
                // Approximately 99 instruction slots used
                            
            };
        }

    }

    technique11 Light3Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input v0.xz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_temps 1
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0, l(0.000000)
                mov o0.y, r0.x
                mov o0.xz, v0.xxzx
                mov o1.xy, v1.xyxx
                mov o1.zw, v2.xxxy
                ret 
                // Approximately 6 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4
                //   float gMaxDist;                    // Offset:  244 Size:     4
                //   float gMinTess;                    // Offset:  248 Size:     4
                //   float gMaxTess;                    // Offset:  252 Size:     4
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float   x   
                // SV_TessFactor            1   x           1 QUADEDGE  float   x   
                // SV_TessFactor            2   x           2 QUADEDGE  float   x   
                // SV_TessFactor            3   x           3 QUADEDGE  float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT  float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[24], dynamicIndexed
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 1
                mov r0.x, vOutputControlPointID
                mov o0.xyz, v[r0.x + 0][0].xyzx
                mov o1.xy, v[r0.x + 0][1].xyxx
                ret 
                hs_fork_phase 
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 5
                mov r0.xz, vicp[2][0].xxzx
                mov r0.y, vicp[0][1].z
                mov r1.xz, vicp[1][0].xxzx
                mov r1.y, vicp[0][1].w
                add r2.xyz, r0.xyzx, r1.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                add r0.xyz, -r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mov r2.w, l(1.000000)
                mov r1.y, l(0)
                mov r1.zw, l(0,0,0,0)
                mov r0.w, l(0)
                loop 
                  ige r3.x, r1.w, l(6)
                  mov r0.w, l(0)
                  breakc_nz r3.x
                  dp3 r3.x, r0.xyzx, |cb0[r1.w + 18].xyzx|
                  dp4 r3.y, r2.xyzw, cb0[r1.w + 18].xyzw
                  add r3.x, r3.x, r3.y
                  lt r3.x, r3.x, l(0.000000)
                  if_nz r3.x
                    mov r1.z, l(-1)
                    mov r0.w, l(-1)
                    break 
                  endif 
                  iadd r1.x, r1.w, l(1)
                  mov r1.zw, r1.yyyx
                  mov r0.w, r3.x
                endloop 
                and r0.x, r1.z, r0.w
                if_nz r0.x
                  mov o0.x, l(0)
                  mov o1.x, l(0)
                  mov o2.x, l(0)
                  mov o3.x, l(0)
                  mov o4.x, l(0)
                  mov o5.x, l(0)
                  ret 
                else 
                  add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                  add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                  add r2.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                  add r3.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                  add r4.xyz, r1.xyzx, vicp[2][0].xyzx
                  add r4.xyz, r4.xyzx, vicp[3][0].xyzx
                  mad r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r0.x, r0.xyzx, r0.xyzx
                  sqrt r0.x, r0.x
                  add r0.x, r0.x, -cb0[15].x
                  add r0.yz, -cb0[15].xxwx, cb0[15].yyzy
                  div_sat r0.x, r0.x, r0.y
                  mad r0.x, r0.x, r0.z, cb0[15].w
                  exp r0.x, r0.x
                  mad r1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r0.w, r1.xyzx, r1.xyzx
                  sqrt r0.w, r0.w
                  add r0.w, r0.w, -cb0[15].x
                  div_sat r0.w, r0.w, r0.y
                  mad r0.w, r0.w, r0.z, cb0[15].w
                  exp r0.w, r0.w
                  mad r1.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r1.x, r1.xyzx, r1.xyzx
                  sqrt r1.x, r1.x
                  add r1.x, r1.x, -cb0[15].x
                  div_sat r1.x, r1.x, r0.y
                  mad r1.x, r1.x, r0.z, cb0[15].w
                  exp r1.x, r1.x
                  mad r2.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb0[12].xyzx
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r1.w, -cb0[15].x
                  div_sat r1.w, r1.w, r0.y
                  mad r1.w, r1.w, r0.z, cb0[15].w
                  exp r1.y, r1.w
                  mad r2.xyz, r4.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), -cb0[12].xyzx
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r1.w, -cb0[15].x
                  div_sat r0.y, r1.w, r0.y
                  mad r0.y, r0.y, r0.z, cb0[15].w
                  exp r1.z, r0.y
                  min o0.x, r0.x, l(64.000000)
                  min o1.x, r0.w, l(64.000000)
                  min r0.xyz, r1.xyzx, l(64.000000, 64.000000, 64.000000, 0.000000)
                  mov o2.x, r0.x
                  mov o3.x, r0.y
                  mov o4.x, r0.z
                  mov o5.x, r0.z
                  ret 
                endif 
                ret 
                // Approximately 95 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float       
                // SV_TessFactor            1   x           1 QUADEDGE  float       
                // SV_TessFactor            2   x           2 QUADEDGE  float       
                // SV_TessFactor            3   x           3 QUADEDGE  float       
                // SV_InsideTessFactor      0   x           4  QUADINT  float       
                // SV_InsideTessFactor      1   x           5  QUADINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_temps 2
                add r0.xy, -vicp[2][0].xzxx, vicp[3][0].xzxx
                mad r0.xy, vDomain.xxxx, r0.xyxx, vicp[2][0].xzxx
                add r0.zw, -vicp[0][0].xxxz, vicp[1][0].xxxz
                mad r0.zw, vDomain.xxxx, r0.zzzw, vicp[0][0].xxxz
                add r0.xy, -r0.zwzz, r0.xyxx
                mad r0.xz, vDomain.yyyy, r0.xxyx, r0.zzwz
                add r1.xy, -vicp[2][1].xyxx, vicp[3][1].xyxx
                mad r1.xy, vDomain.xxxx, r1.xyxx, vicp[2][1].xyxx
                add r1.zw, -vicp[0][1].xxxy, vicp[1][1].xxxy
                mad r1.zw, vDomain.xxxx, r1.zzzw, vicp[0][1].xxxy
                add r1.xy, -r1.zwzz, r1.xyxx
                mad r1.xy, vDomain.yyyy, r1.xyxx, r1.zwzz
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.xyxx, t0.yxzw, s0, l(0.000000)
                mov r0.w, l(1.000000)
                dp4 o0.x, r0.xyzw, cb1[0].xyzw
                dp4 o0.y, r0.xyzw, cb1[1].xyzw
                dp4 o0.z, r0.xyzw, cb1[2].xyzw
                dp4 o0.w, r0.xyzw, cb1[3].xyzw
                mov o1.xyz, r0.xyzx
                mul o2.zw, r1.xxxy, cb0[17].xxxy
                mov o2.xy, r1.xyxx
                ret 
                // Approximately 22 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4
                //   float gWorldCellSpace;             // Offset:  264 Size:     4
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samHeightmap                      sampler      NA          NA    1        1
                // gLayerMapArray                    texture  float4     2darray    0        1
                // gBlendMap                         texture  float4          2d    1        1
                // gHeightMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[7], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_output o0.xyzw
                dcl_temps 8
                mov r0.xy, v2.zwzz
                mov r0.z, l(3.000000)
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, r0.xyzx, t0.xyzw, s0
                mov r1.xy, v2.zwzz
                mov r1.z, l(2.000000)
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, r1.xyzx, t0.xyzw, s0
                mov r2.xy, v2.zwzz
                mov r2.z, l(1.000000)
                sample_indexable(texture2darray)(float,float,float,float) r2.xyzw, r2.xyzx, t0.xyzw, s0
                mov r3.xy, v2.zwzz
                mov r3.z, l(0)
                sample_indexable(texture2darray)(float,float,float,float) r3.xyzw, r3.xyzx, t0.xyzw, s0
                add r2.xyzw, r2.xyzw, -r3.xyzw
                sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v2.xyxx, t1.xyzw, s0
                mad r2.xyzw, r4.xxxx, r2.xyzw, r3.xyzw
                add r1.xyzw, r1.xyzw, -r2.xyzw
                mad r1.xyzw, r4.yyyy, r1.xyzw, r2.xyzw
                add r0.xyzw, r0.xyzw, -r1.xyzw
                mad r0.xyzw, r4.zzzz, r0.xyzw, r1.xyzw
                mov r1.xy, v2.zwzz
                mov r1.z, l(4.000000)
                sample_indexable(texture2darray)(float,float,float,float) r1.xyzw, r1.xyzx, t0.xyzw, s0
                add r1.xyzw, -r0.xyzw, r1.xyzw
                mad r0.xyzw, r4.wwww, r1.xyzw, r0.xyzw
                mov r1.xz, l(0,0,0,0)
                mov r1.y, cb0[16].y
                mov r1.w, -cb0[16].y
                add r1.xyzw, r1.xyzw, v2.xyxy
                sample_l_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t2.xyzw, s1, l(0.000000)
                sample_l_indexable(texture2d)(float,float,float,float) r1.y, r1.zwzz, t2.yxzw, s1, l(0.000000)
                add r1.x, -r1.y, r1.x
                mul r1.y, cb0[16].z, l(-2.000000)
                dp2 r1.w, r1.xyxx, r1.xyxx
                rsq r1.w, r1.w
                mov r1.z, l(0)
                mul r1.xyz, r1.wwww, r1.xyzx
                mov r2.x, -cb0[16].x
                mov r2.yw, l(0,0,0,0)
                mov r2.z, cb0[16].x
                add r2.xyzw, r2.xyzw, v2.xyxy
                sample_l_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t2.yzwx, s1, l(0.000000)
                sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.zwzz, t2.xyzw, s1, l(0.000000)
                add r2.y, -r1.w, r2.x
                mul r2.x, cb0[16].z, l(2.000000)
                dp2 r1.w, r2.xyxx, r2.xyxx
                rsq r1.w, r1.w
                mul r2.z, r1.w, r2.y
                add r2.w, cb0[16].z, cb0[16].z
                mul r2.y, r1.w, r2.w
                mov r2.x, l(0)
                mul r3.xyz, r1.xyzx, r2.xyzx
                mad r1.xyz, r2.zxyz, r1.yzxy, -r3.xyzx
                dp3 r1.w, cb0[3].xyzx, r1.xyzx
                add r1.w, r1.w, r1.w
                mad r2.xyz, r1.xyzx, -r1.wwww, cb0[3].xyzx
                add r3.xyz, -v1.xyzx, cb0[12].xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                sqrt r1.w, r1.w
                div r3.xyz, r3.xyzx, r1.wwww
                add r1.w, r1.w, -cb0[12].w
                div_sat r1.w, r1.w, cb0[13].x
                dp3 r2.x, r2.xyzx, r3.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, cb1[6].w
                exp r2.x, r2.x
                mul r2.xyzw, r2.xxxx, cb1[6].xyzw
                mul r2.xyzw, r2.xyzw, cb0[2].xyzw
                dp3 r3.w, -cb0[3].xyzx, r1.xyzx
                lt r4.x, l(0.000000), r3.w
                mul r5.xyzw, r3.wwww, cb1[5].xyzw
                mul r5.xyzw, r5.xyzw, cb0[1].xyzw
                and r5.xyzw, r4.xxxx, r5.xyzw
                and r2.xyzw, r2.xyzw, r4.xxxx
                dp3 r3.w, cb0[7].xyzx, r1.xyzx
                add r3.w, r3.w, r3.w
                mad r4.xyz, r1.xyzx, -r3.wwww, cb0[7].xyzx
                dp3 r3.w, r4.xyzx, r3.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, cb1[6].w
                exp r3.w, r3.w
                mul r4.xyzw, r3.wwww, cb1[6].xyzw
                mul r4.xyzw, r4.xyzw, cb0[6].xyzw
                dp3 r3.w, -cb0[7].xyzx, r1.xyzx
                lt r6.x, l(0.000000), r3.w
                mul r7.xyzw, r3.wwww, cb1[5].xyzw
                mul r7.xyzw, r7.xyzw, cb0[5].xyzw
                and r7.xyzw, r6.xxxx, r7.xyzw
                and r4.xyzw, r4.xyzw, r6.xxxx
                add r2.xyzw, r2.xyzw, r4.xyzw
                add r4.xyzw, r5.xyzw, r7.xyzw
                dp3 r3.w, cb0[11].xyzx, r1.xyzx
                add r3.w, r3.w, r3.w
                mad r5.xyz, r1.xyzx, -r3.wwww, cb0[11].xyzx
                dp3 r1.x, -cb0[11].xyzx, r1.xyzx
                dp3 r1.y, r5.xyzx, r3.xyzx
                max r1.y, r1.y, l(0.000000)
                log r1.y, r1.y
                mul r1.y, r1.y, cb1[6].w
                exp r1.y, r1.y
                mul r3.xyzw, r1.yyyy, cb1[6].xyzw
                mul r3.xyzw, r3.xyzw, cb0[10].xyzw
                lt r1.y, l(0.000000), r1.x
                mul r5.xyzw, r1.xxxx, cb1[5].xyzw
                mul r5.xyzw, r5.xyzw, cb0[9].xyzw
                and r5.xyzw, r1.yyyy, r5.xyzw
                and r3.xyzw, r3.xyzw, r1.yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw
                add r3.xyzw, r4.xyzw, r5.xyzw
                mul r4.xyzw, cb0[4].xyzw, cb1[4].xyzw
                mad r4.xyzw, cb1[4].xyzw, cb0[0].xyzw, r4.xyzw
                mad r4.xyzw, cb1[4].xyzw, cb0[8].xyzw, r4.xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw
                mad r0.xyzw, r0.xyzw, r3.xyzw, r2.xyzw
                add r2.xyzw, -r0.xyzw, cb0[14].xyzw
                mad o0.xyzw, r1.wwww, r2.xyzw, r0.xyzw
                ret 
                // Approximately 118 instruction slots used
                            
            };
        }

    }

}

